1. 전체 파이프라인 개요

목적:
	•	in-situ 파우치셀 승온 실험에서 얻은 1차원(azimuthally averaged) 스펙트럼 데이터를 처리하여,
	•	시간(또는 인덱스) vs. 2θ 혹은 q의 contour map을 생성하고
	•	알루미늄 피크(대략 38.33° 부근)의 위치를 추적 및 Gaussian 피팅을 통해 정밀 측정한 뒤,
	•	온도에 따른 피크 이동 추세를 파악하고,
	•	sdd의 변화로 인한 이상(피크 위치의 급격한 변동)을 사용자 인터랙션 및 자동 보정(피팅 및 최적화)으로 수정
	•	그리고 최종 보정된 데이터를 저장/출력하는 것


2. 모듈별 기능 및 처리 단계

(1) 데이터 임포트 및 전처리 모듈
	•	a. 파일 수집 및 읽기:
	•	실험 데이터(.dat 파일)를 읽어 들여, 각 데이터에 대해 x축(2θ 혹은 q)와 y축(강도)을 추출
	•	b. 메타데이터 추출:
	•	각 파일에 포함된 시간, 온도, sdd, 에너지 등의 정보를 함께 읽어 구조화
	•	예: Pandas DataFrame, 혹은 각 데이터를 딕셔너리 리스트 형태로 관리
	•	c. 데이터 정렬:
	•	시간 순서 또는 온도 순으로 데이터를 정렬하여 이후 contour map 생성 및 피크 추적에 용이하게 함

(2) Contour Map 생성 모듈
	•	a. 2차원 데이터 구성:
	•	x축: 2θ(또는 q), y축: 시간(또는 인덱스), z축(컬러): intensity
	•	b. 초기 시각화:
	•	MATLAB 코드 포팅을 고려하여 matplotlib 등으로 contour map을 그리며,
	•	사용자에게 전체 데이터의 분포를 확인시키고,
	•	이후 피크 추적을 위한 시작/종료 영역 선택의 근거로 사용

(3) 초기 피크 검출 및 사용자 입력 모듈
	•	a. 첫 번째 스펙트럼 표시:
	•	0번 데이터(첫번째 스펙트럼)를 플롯하여 사용자에게 보여줌
	•	b. x축 범위 지정:
	•	사용자로부터 알루미늄 피크가 있을 것으로 예상되는 범위 (예: 38.1° ~ 38.5°)를 입력받음
	•	초기 버전은 콘솔 입력(숫자 입력) 방식 → 추후 GUI에서 인터랙티브하게 전환 가능
	•	c. 첫 피크의 정밀 검출:
	•	입력된 범위 내에서 Gaussian 피팅을 수행하여 알루미늄 피크의 정확한 중심 위치(예상 약 38.33° 근처)를 찾음

(4) 연속 피크 추적 및 검증 모듈
	•	a. 이전 피크 기준 추적:
	•	0번 데이터의 피크 중심을 기준으로, 이후 데이터에서는 “알루미늄 피크 영역”를
– 매번 동일한 범위(사용자가 지정한 범위)로 단순히 고정하지 않고,
– 바로 이전 데이터에서 얻은 피크 중심을 기준으로 조금의 범위(예: ±Δ)를 두고 검색하도록 함
	•	b. Gaussian 피팅 및 검증:
	•	각 스펙트럼에 대해 Gaussian 피팅을 수행하고,
	•	이전 데이터와의 intensity 혹은 피크 위치 변화(예: 갑작스런 변화가 없는지)를 비교하여
“정상” 데이터로 판단할 수 있는지 검증
	•	개선 제안: 검증 기준(예: intensity 변화율, 피크 위치의 변화량 등)을 미리 정해두고,
threshold-based 혹은 통계적 방법으로 자동 판단할 수 있도록 구현하고,
사용자가 필요시 이를 수동으로 조정하도록 인터랙션 제공
	•	c. 사용자 선택 반복:
	•	contour map 상에서 “시작점”과 “끝점”을 사용자가 클릭하여,
	•	정상적으로 피크 추적이 가능한 데이터 범위를 정함
	•	이후 n회(또는 지정된 범위 내) 피크를 추적하여 데이터 목록을 완성

(5) 온도-피크 이동 추세 분석 및 피팅 모듈
	•	a. 데이터 매핑:
	•	각 데이터의 피크 위치(정확한 2θ 혹은 q 값)와 해당 시점의 온도 정보를 매핑
	•	b. 추세 피팅:
	•	온도에 따른 피크 이동(shift)이 보통 선형 혹은 단순 비선형 관계로 나타날 것으로 예상되므로,
적절한 함수(예: 선형 회귀 또는 비선형 회귀)를 사용해 피팅 수행
	•	c. 시각적 검증:
	•	contour map 위에 “예상 피크 위치 선”을 오버레이하여 사용자에게 검증 받음

(6) sdd 보정 및 재피팅 모듈
	•	a. 이상 피크 식별:
	•	피팅된 추세선과 실제 측정된 피크 위치가 큰 차이를 보이는 구간을 자동 또는 사용자에 의해 식별
	•	b. 재측정/재입력:
	•	해당 구간의 스펙트럼을 따로 표시하고,
사용자가 직접 알루미늄 피크 영역을 재설정할 수 있도록 함 (초기 단계와 유사하게)
	•	c. sdd 보정 작업:
	•	x축 (q 혹은 2θ) 계산 시 사용한 sdd 값이 잘못되어 피크 위치가 어긋난 것으로 판단되면,
	•	“멱급수(또는 기타 최적화) 방식”을 사용해 sdd 값을 조정하여,
계산된 피크 위치가 피팅된 추세선에 맞도록 보정
	•	이 보정은 “피팅 영역 외 영역”에 대해 수행 → 전체 데이터에 대해 보정값을 적용

(7) 최종 출력 및 데이터 저장 모듈
	•	a. 보정된 contour map 출력:
	•	보정이 완료된 데이터를 contour map으로 시각화하여,
사용자가 최종 결과를 확인할 수 있게 함
	•	b. 데이터 저장:
	•	보정된 스펙트럼 데이터, 피크 위치, 보정된 sdd 값, 피팅 결과 등을 파일(CSV, .dat 등)로 저장
	•	c. 결과 리포트:
	•	필요한 경우, 각 단계에서의 중간 결과 및 최종 피팅 결과를 요약하여 리포트 형태로 출력

(8) 모듈화 및 향후 UI/GUI 통합 고려
	•	a. 기능별 함수/클래스 분리:
	•	데이터 임포트, 전처리, 피크 검출, 피팅, sdd 보정, 시각화 등 모든 기능을
별도의 함수 혹은 클래스 단위로 모듈화하여, 나중에 GUI 인터페이스와 쉽게 연동할 수 있도록 설계
	•	b. 인터페이스 분리:
	•	핵심 로직(데이터 처리, 피팅, 보정)은 UI와 분리하여 작성
	•	입력과 출력만 인터페이스에서 받아들이도록 (예: CLI 혹은 추후 PyQt/Tkinter)
	•	c. 확장성 및 테스트:
	•	각 모듈별 유닛 테스트를 작성하여, 나중에 코드 변경 시에도 안정적으로 동작하도록 준비


3. 개발 순서 제안
	1.	데이터 임포트 및 전처리 모듈 개발
	•	다양한 형식의 실험 데이터 읽기, 메타데이터 추출, 데이터 구조 정리
	•	샘플 데이터를 사용해 올바르게 읽어들이는지 검증
	2.	Contour Map 생성 모듈 개발
	•	1차원 데이터들을 모아 2차원 contour map을 생성, 시각화
	•	사용자에게 전체 데이터의 분포를 확인시키는 초기 인터페이스 구현
	3.	초기 피크 검출 및 사용자 입력 기능 구현
	•	첫 번째 스펙트럼에 대해 x축 범위 선택 및 Gaussian 피팅을 통해 피크 중심 찾기
	•	간단한 콘솔 입력 방식으로 범위 지정
	4.	연속 피크 추적 및 검증 모듈 개발
	•	이전 피크 정보를 기반으로 각 스펙트럼에서 피크 추적
	•	자동 검증 알고리즘(혹은 사용자 재입력 요청) 구현
	•	필요한 경우 contour map 상에서 시작/종료 점 선택 기능 구현
	5.	온도-피크 이동 추세 피팅 모듈 구현
	•	피크 위치와 온도 데이터를 매핑하여 회귀 분석 진행
	•	결과를 시각화해 사용자가 확인할 수 있도록 함
	6.	sdd 보정 모듈 구현
	•	피크 검출이 실패한 구간 혹은 피팅과 큰 차이가 나는 데이터를 대상으로 sdd 보정 로직 개발
	•	보정 전/후 데이터를 비교할 수 있는 시각화 기능 추가
	7.	최종 출력 및 저장 기능 구현
	•	보정된 데이터와 contour map, 피팅 결과 등의 저장 및 출력 기능 완성
	8.	모듈화 정리 및 GUI 통합 준비
	•	각 기능별 코드를 별도 함수/클래스로 정리
	•	인터페이스(입출력)를 분리하여, 추후 GUI를 위한 후킹 포인트 마련
	•	코드 문서화 및 유닛 테스트 추가



4. 개선 및 추가 제안
	•	자동화 vs. 사용자 개입:
	•	초기에 사용자의 수동 선택(피크 범위, 시작/종료 점)을 요구하더라도,
피크 검출 알고리즘이 점차 학습(예: 이동 평균, adaptive windowing 등)할 수 있도록 개선할 수 있음
	•	“비정상” 데이터 자동 감지를 위한 알고리즘을 도입하고, 사용자에게만 알림 후 재입력을 요구
	•	피크 검출 알고리즘 개선:
	•	단순 Gaussian 피팅 외에도, 잡음 제거(예: smoothing, baseline 제거) 등의 전처리 기법을 적용
	•	피크 검출 시 주변 피크와의 구분이 어려울 경우, 다중 피크 피팅 알고리즘을 고려
	•	시각화 및 사용자 인터랙션:
	•	matplotlib의 interactive 기능(예: ginput)을 활용하거나, Plotly, Bokeh 등을 도입해
보다 직관적인 데이터 선택 및 결과 확인을 지원
	•	에러 핸들링 및 로깅:
	•	각 단계별로 에러 발생 시 로그를 남기고, 사용자에게 명확한 에러 메시지와 해결 방법을 안내
	•	유닛 테스트 및 버전 관리:
	•	각 모듈별로 테스트 케이스를 작성해 안정적인 동작을 보장하고,
Git 등 버전 관리 시스템을 통해 코드의 이력을 관리